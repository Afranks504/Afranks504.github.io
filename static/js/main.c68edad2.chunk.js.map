{"version":3,"sources":["components/GetToken.js","components/GenreList.js","components/BpmRange.js","components/GetSongs.js","components/SongList.js","components/CreatePlaylist.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["GetToken","bareUrl","window","location","protocol","host","pathname","redirectUri","encodeURIComponent","concat","react_default","a","createElement","Button_default","variant","color","className","target","href","this","tokenRequestUrl","Component","GenreList","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateChosenGenres","bind","assertThisInitialized","state","error","isLoaded","genres","data","options","map","x","push","value","label","_this2","self","spotify","getAvailableGenreSeeds","then","result","setState","formatGenreData","invalidateToken","status","react_select_esm","onChange","autoFocus","isMulti","placeholder","BpmRange","min","minCadence","max","maxCadence","InputLabel_default","disableAnimation","js_default","maxValue","minValue","draggableTrack","formatLabel","e","updateCadence","GetSongs","getRecommendations","songs","updateSongListNeedsUpdate","updateSongList","seeds","seedValues","forEach","element","limit","seed_genres","getSeedValues","chosenGenres","target_danceability","min_tempo","max_tempo","console","log","tracks","seedCount","songListNeedsUpdate","onClick","Search_default","disabled","SongList","listItems","songList","song","ListItem_default","key","uri","alignItems","ListItemAvatar_default","Avatar_default","src","album","images","url","ListItemText_default","primary","name","secondary","List_default","CreatePlaylist","getPlaylist","handleChange","isReturned","spotifyUser","playlistNameInputValue","playlistUrl","getUserId","event","uriArray","getMe","response","playlistID","addTracksToPlaylist","buildSongUriArray","playlistName","createPlaylist","id","public","fillPlaylist","external_urls","TextField_default","Save_default","OpenInNew_default","Fragment","Body","genreList","Spotify","haveToken","setAccessToken","token","length","tokenValid","components_GenreList","components_BpmRange","components_GetSongs","components_CreatePlaylist","components_SongList","components_GetToken","App","accessToken","components_Body","Boolean","hostname","match","ReactDOM","render","src_App_0","hash","getAccessToken","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c68edad2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nclass GetToken extends Component {\n\n    tokenRequestUrl() {\n        const apiUrl = 'https://accounts.spotify.com/authorize';\n        const clientId = 'aed1fb11b28a4236aafa2241b827155f';\n        const scopes = ['playlist-modify-public'];\n        //Don't want to pass parameters or hashes to spotify api\n        const bareUrl = window.location.protocol + '//' + window.location.host + window.location.pathname;\n        const redirectUri = encodeURIComponent(bareUrl);\n        const responseType = 'token';   \n        const requestUrl = \n            `${apiUrl}?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=${responseType}&scope=${encodeURIComponent(scopes)}`\n        ;     \n        return requestUrl;\n    }\n\n    render() {\n        return (\n            <Button  variant=\"contained\" color=\"primary\" className=\"get_token\" target = \"\" href={this.tokenRequestUrl()}>Authorize Spotify App</Button>\n        );\n    }\n}\n\nexport default GetToken","import React, { Component } from 'react';\nimport Select from 'react-select';\n\nclass GenreList extends Component {\n    constructor(props) {\n        super(props);\n        this.updateChosenGenres = this.updateChosenGenres.bind(this);\n        \n        this.state = {\n            error: null,\n            isLoaded: false,\n            genres: ['Loading Genres'],            \n        };\n    }\n\n    //react-select options need to be value:label formatted\n    formatGenreData(data) {\n        let options = [];\n        data.genres.map(x => options.push({value: x, label: x}))\n        return options;\n    }\n\n    updateChosenGenres(genres) {\n        this.props.updateChosenGenres(genres);\n    }   \n\n    componentDidMount(){\n        let self = this;\n        this.props.spotify.getAvailableGenreSeeds()\n            .then(\n                (result) => {\n                self.setState({\n                    genres: self.formatGenreData(result),\n                    isLoaded: true\n                });\n            },\n            (error) => {\n                this.props.invalidateToken();\n            }\n        )\n    }\n    \n    componentWillUnmount() {\n        \n    }\n    \n    render() {\n        if (this.state.error){\n            if (this.state.error.status === 401)\n            return(<h3>Token expired, please request a new one:</h3>)\n            else\n                return(<h3>Error loading Genre List</h3>)\n        } else if (this.isLoaded){\n            return(<h3>Loading Genre List...</h3>)\n        } else {\n            return (\n                <ul className=\"genreList\">\n                    <Select \n                        onChange={this.updateChosenGenres} \n                        autoFocus={true} \n                        isMulti={true} \n                        options={this.state.genres}\n                        placeholder=\"Choose genres\" \n                    />\n                </ul>\n            );\n        }\n\n    }\n}\n\nexport default GenreList","import React, { Component } from 'react';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css'\nimport InputLabel from '@material-ui/core/InputLabel';\n\nclass BpmRange extends Component {\n\n    render() { \n        var value = {\n            min: this.props.minCadence, max: this.props.maxCadence\n        }\n        return ( \n                <div className=\"bpmRangeContainer\">\n                    <InputLabel disableAnimation={true} className=\"bpm_label\">Song range: {this.props.minCadence} - {this.props.maxCadence} beats per minute</InputLabel>\n                    <InputRange\n                        maxValue={200}\n                        minValue={50}\n                        draggableTrack={true}\n                        value={value}\n                        formatLabel={e => \"\"}\n                        onChange={value => this.props.updateCadence(value.min, value.max)} \n                        />\n                </div>\n        ); \n    }\n}\n \nexport default BpmRange;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport SearchIcon from '@material-ui/icons/Search';\n\nclass GetSongs extends Component {\n    constructor(props) {\n        super(props);\n        this.getRecommendations = this.getRecommendations.bind(this);\n    }\n\n    updateSongList(songs) {\n        this.props.updateSongListNeedsUpdate(false);\n        this.props.updateSongList(songs);\n    }\n\n    getSeedValues(seeds) {\n        let seedValues = [];\n        seeds.forEach(function(element){\n            seedValues.push(element.value);\n        })\n        return seedValues;\n    }\n\n    getRecommendations() {\n        let self = this;\n        let seeds = {\n            limit: 50,\n            seed_genres: this.getSeedValues(this.props.chosenGenres),\n            target_danceability: 0.9,\n            min_tempo: this.props.minCadence,\n            max_tempo: this.props.maxCadence\n        }\n        this.props.spotify.getRecommendations(seeds, function(error, data) {\n            if (error) console.log(error);\n            else self.updateSongList(data.tracks);\n        })\n    }\n\n    render() {\n        if (this.props.seedCount >= 1 && this.props.seedCount <= 5) {\n            if (this.props.songListNeedsUpdate) {\n                return(\n                    <div>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.getRecommendations}>\n                            Get Songs\n                            <SearchIcon className=\"rightIcon\" />\n                        </Button>\n                    </div>\n                )\n            } else {\n                return(\n                    <div>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={this.getRecommendations}>\n                            Get Songs\n                            <SearchIcon className=\"rightIcon\" />\n                        </Button>\n                    </div>\n                )\n            }\n        } else if (this.props.seedCount === 0) {\n            return(<Button variant=\"contained\" color=\"primary\" disabled>Get Songs</Button>)\n        } else if (this.props.seedCount > 5) {\n            return(<div>Please select 5 or less options</div>)\n        } else {\n            return(<div>Something went wrong...</div>)\n        }\n    }\n}\n\nexport default GetSongs","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\n\nclass SongList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n\n    render() { \n        const listItems = this.props.songList.map((song) =>\n            <ListItem key={song.uri} alignItems=\"flex-start\">\n                <ListItemAvatar>\n                    <Avatar src={song.album.images[2].url}/>\n                </ListItemAvatar>\n                <ListItemText\n                    primary={song.name}\n                    secondary={song.album.name}\n                />\n            </ListItem>\n        );\n\n\n        return ( \n            <List className=\"songList\">\n                {listItems}\n            </List> \n        );\n    }\n}\n \nexport default SongList;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport SaveIcon from '@material-ui/icons/Save';\nimport OpenInNew from '@material-ui/icons/OpenInNew';\nimport TextField from '@material-ui/core/TextField';\n\nclass CreatePlaylist extends Component {\n    constructor(props) {\n        super(props);\n        this.getPlaylist = this.getPlaylist.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.state = {\n            error: null,\n            isReturned: false,\n            spotifyUser: null,\n            playlistNameInputValue: '',\n            playlistUrl: '',\n\n        };\n    }\n\n    componentDidMount(){\n        this.getUserId();\n    }\n    \n    handleChange(event) {\n        this.setState({playlistNameInputValue: event.target.value});\n    }\n\n    buildSongUriArray(songs) {\n        let uriArray = [];\n        songs.map(song => uriArray.push(song.uri));\n        return (uriArray);\n    }\n\n    getUserId() {\n        let self = this;\n        this.props.spotify.getMe().then(\n            function(response) {\n                self.setState({\n                    spotifyUser: response,\n                })\n            }, function(error) {\n                console.error(error);\n            }\n        )\n    }\n\n    fillPlaylist(playlistID) {\n        this.props.spotify.addTracksToPlaylist(playlistID,this.buildSongUriArray(this.props.songList)).then(\n            function() {\n            }, function(error) {\n                console.error(error);\n            }\n        )\n    }\n\n    getPlaylist() {\n        let self = this;\n        let playlistName = (this.state.playlistNameInputValue !== '' ? this.state.playlistNameInputValue : \"New Playlist\");\n        this.props.spotify.createPlaylist(\n            this.state.spotifyUser.id,\n            {\n                name: playlistName + \" (Cadence)\",\n                public: true\n            }\n        ).then(\n            function(response){\n                self.fillPlaylist(response.id);\n                self.setState({playlistUrl: response.external_urls.spotify})\n            }, function(error) {\n                console.error(error);\n            }\n        );\n    }\n\n    render() {\n        if (this.state.spotifyUser != null) {\n            return(\n                <div className=\"create_playlist\">\n                    <TextField label=\"Playlist Name\"value={this.state.playlistNameInputValue} onChange={this.handleChange}></TextField>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.getPlaylist}>\n                        Create Playlist\n                        <SaveIcon className=\"rightIcon\" />    \n                    </Button>\n                    {this.state.playlistUrl !== \"\"\n                        ? <Button \n                            className=\"open_playlist\" \n                            variant=\"contained\" \n                            href={this.state.playlistUrl} \n                            target=\"_blank\"\n                        >\n                            Open Playlist\n                            <OpenInNew className=\"rightIcon\"/>    \n                        </Button>\n                        : <React.Fragment/>\n                    }\n                </div>\n            );\n        } else {\n            return(\n                <div></div>\n            )\n        }\n    }\n}\n\nexport default CreatePlaylist","import React, { Component } from 'react';\nimport Spotify from 'spotify-web-api-js';\nimport GetToken from './GetToken.js';\nimport GenreList from './GenreList.js';\nimport BpmRange from './BpmRange.js';\nimport GetSongs from './GetSongs.js';\nimport SongList from './SongList.js';\nimport CreatePlaylist from './CreatePlaylist.js';\n\nclass Body extends Component {\n    constructor(props) {\n        super(props);\n        this.spotify = new Spotify();\n        if (this.props.haveToken) {\n            this.spotify.setAccessToken(this.props.token);\n        }\n        this.state = { \n            chosenGenres: [],\n            minCadence: 170,\n            maxCadence: 190,\n            songList: [],\n            songListNeedsUpdate: true\n        };\n    }\n\n    updateSongListNeedsUpdate = (status) => {\n        this.setState({songListNeedsUpdate: status});\n    }\n\n    updateChosenGenres = (genreList) => {\n        this.setState({\n            chosenGenres: genreList,\n            songListNeedsUpdate: true});\n    }\n    updateSongList = (songList) => {\n        this.setState({songList: songList});\n    }\n    updateCadence = (min, max) => {\n        this.setState({\n            minCadence: min,\n            maxCadence: max,\n            songListNeedsUpdate: true\n        })\n    }\n\n    render() { \n        this.seedCount = this.state.chosenGenres.length;\n        if (!this.props.haveToken || !this.props.tokenValid) {\n            return (  \n                <div className=\"bodyContainer\">\n                    <GetToken />\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"bodyContainer\">\n                    <GenreList spotify={this.spotify} invalidateToken={this.props.invalidateToken} updateChosenGenres={this.updateChosenGenres}/>\n                    <BpmRange minCadence={this.state.minCadence} maxCadence={this.state.maxCadence} updateCadence={this.updateCadence}/>\n                    <GetSongs \n                        spotify={this.spotify} \n                        invalidateToken={this.props.invalidateToken} \n                        updateSongList={this.updateSongList} \n                        seedCount={this.seedCount} \n                        chosenGenres={this.state.chosenGenres}\n                        minCadence={this.state.minCadence}\n                        maxCadence={this.state.maxCadence}\n                        songListNeedsUpdate={this.state.songListNeedsUpdate}\n                        updateSongListNeedsUpdate={this.updateSongListNeedsUpdate}\n                    />\n                    {this.state.songList.length > 0\n                        ? <CreatePlaylist \n                            spotify={this.spotify} \n                            songList={this.state.songList} />\n                        : <React.Fragment />\n                    }\n                    \n                    <SongList songList={this.state.songList} />\n                </div>\n            )\n        }\n    }\n}\n \nexport default Body;","import React, { Component  } from 'react';\nimport Body from './components/Body.js'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.invalidateToken = this.invalidateToken.bind(this);\n\n    this.state = { \n    \thaveToken: this.props.accessToken ? true : false,\n    \ttokenValid: true\n    }\n\t}\n  \n  \tinvalidateToken() {\n  \t  \tthis.setState({tokenValid: false})\n  \t}\n\n  \trender() {\n  \t  \treturn(  \n  \t  \t  \t<div className=\"App\">\n  \t  \t  \t  \t<header className=\"App-header\">\n\t\t\t\t\t\t\t\t\t<h4>Skate Playlist Generator</h4>\n  \t  \t  \t  \t</header>\n  \t  \t  \t  \t<Body \n  \t  \t  \t  \t\ttoken={this.props.accessToken} \n  \t  \t  \t  \t\thaveToken={this.state.haveToken} \n  \t  \t  \t  \t\ttokenValid={this.state.tokenValid }\n  \t  \t  \t  \t\tinvalidateToken={this.invalidateToken}/>\n  \t  \t  \t</div>\n  \t  \t)\n  \t};\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl)\n      .then(response => {\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction getAccessToken() {\n    var result = window.location.hash.match(/#(?:access_token)=([\\S\\s]*?)&/);\n    return (result ? result[1] : '');\n};\n\n\nReactDOM.render(<App accessToken={getAccessToken()}/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}